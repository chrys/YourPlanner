# Generated by Django 5.2.1 on 2025-06-01 14:15

import django.db.models.deletion
from decimal import Decimal
from django.db import migrations, models
from django.utils.text import slugify

def generate_unique_item_slugs(apps, schema_editor):
    Item = apps.get_model('services', 'Item')
    db_alias = schema_editor.connection.alias
    items_to_update = []
    for item in Item.objects.using(db_alias).select_related('service').iterator():
        # Only generate if slug is currently empty or would be considered blank by the model
        # This check might need adjustment if items could have legitimate blank slugs
        # that should not be overwritten. Given blank=True, new items get ""
        if not item.slug:
            base_slug = slugify(item.title)
            if not base_slug: # Handle empty titles or titles that slugify to empty
                base_slug = 'item' # Default slug if title is empty or slugs to empty

            slug = base_slug
            counter = 1
            # Check for uniqueness within the same service
            # Ensure we are checking against the current state in the loop or database if items are many
            while Item.objects.using(db_alias).filter(service_id=item.service_id, slug=slug).exclude(pk=item.pk).exists():
                slug = f"{base_slug}-{counter}"
                counter += 1
            item.slug = slug
            items_to_update.append(item)

    if items_to_update:
        Item.objects.using(db_alias).bulk_update(items_to_update, ['slug'])

def generate_unique_service_slugs(apps, schema_editor):
    Service = apps.get_model('services', 'Service')
    db_alias = schema_editor.connection.alias
    services_to_update = []
    for service in Service.objects.using(db_alias).select_related('professional').iterator():
        if not service.slug:
            base_slug = slugify(service.title)
            if not base_slug:
                base_slug = 'service'

            slug = base_slug
            counter = 1
            # Check for uniqueness within the same professional
            while Service.objects.using(db_alias).filter(professional_id=service.professional_id, slug=slug).exclude(pk=service.pk).exists():
                slug = f"{base_slug}-{counter}"
                counter += 1
            service.slug = slug
            services_to_update.append(service)

    if services_to_update:
        Service.objects.using(db_alias).bulk_update(services_to_update, ['slug'])

class Migration(migrations.Migration):

    dependencies = [
        ('services', '0003_item_image'),
        ('users', '0003_customer_billing_address_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='ServiceCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('slug', models.SlugField(max_length=100, unique=True)),
            ],
            options={
                'verbose_name': 'Service Category',
                'verbose_name_plural': 'Service Categories',
                'ordering': ['name'],
            },
        ),
        migrations.AlterModelOptions(
            name='item',
            options={'ordering': ['service', 'position', 'title'], 'verbose_name': 'Item', 'verbose_name_plural': 'Items'},
        ),
        migrations.AddField(
            model_name='item',
            name='position',
            field=models.PositiveIntegerField(default=0, help_text='Position of this item in the service display'),
        ),
        migrations.AddField(
            model_name='item',
            name='sku',
            field=models.CharField(blank=True, help_text='Stock Keeping Unit - unique identifier for this item', max_length=50, null=True),
        ),
        migrations.AddField(
            model_name='item',
            name='slug',
            field=models.SlugField(blank=True, max_length=255),
        ),
        migrations.RunPython(generate_unique_item_slugs, migrations.RunPython.noop),
        migrations.AddField(
            model_name='item',
            name='stock',
            field=models.PositiveIntegerField(default=0, help_text='Number of items in stock (0 for unlimited or not applicable)'),
        ),
        migrations.AddField(
            model_name='price',
            name='discount_percentage',
            field=models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Discount percentage applied to this price', max_digits=5),
        ),
        migrations.AddField(
            model_name='price',
            name='max_quantity',
            field=models.PositiveIntegerField(blank=True, help_text='Maximum quantity for this price (blank for unlimited)', null=True),
        ),
        migrations.AddField(
            model_name='price',
            name='min_quantity',
            field=models.PositiveIntegerField(default=1, help_text='Minimum quantity for this price'),
        ),
        migrations.AddField(
            model_name='price',
            name='valid_from',
            field=models.DateTimeField(blank=True, help_text='When this price becomes valid', null=True),
        ),
        migrations.AddField(
            model_name='price',
            name='valid_until',
            field=models.DateTimeField(blank=True, help_text='When this price expires', null=True),
        ),
        migrations.AddField(
            model_name='service',
            name='featured',
            field=models.BooleanField(default=False, help_text='Feature this service in listings?'),
        ),
        migrations.AddField(
            model_name='service',
            name='slug',
            field=models.SlugField(blank=True, max_length=255),
        ),
        migrations.RunPython(generate_unique_service_slugs, migrations.RunPython.noop),
        migrations.AlterField(
            model_name='price',
            name='currency',
            field=models.CharField(default='EUR', max_length=3),
        ),
        migrations.AddIndex(
            model_name='item',
            index=models.Index(fields=['service', 'position'], name='services_it_service_ae23f5_idx'),
        ),
        migrations.AddIndex(
            model_name='item',
            index=models.Index(fields=['sku'], name='services_it_sku_ef9261_idx'),
        ),
        migrations.AddIndex(
            model_name='price',
            index=models.Index(fields=['is_active'], name='services_pr_is_acti_e94766_idx'),
        ),
        migrations.AddIndex(
            model_name='price',
            index=models.Index(fields=['valid_from', 'valid_until'], name='services_pr_valid_f_9048ad_idx'),
        ),
        migrations.AddConstraint(
            model_name='item',
            constraint=models.UniqueConstraint(fields=('service', 'slug'), name='unique_service_item_slug'),
        ),
        migrations.AddField(
            model_name='service',
            name='category',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='services', to='services.servicecategory'),
        ),
        migrations.AddIndex(
            model_name='service',
            index=models.Index(fields=['is_active'], name='services_se_is_acti_91b7ea_idx'),
        ),
        migrations.AddIndex(
            model_name='service',
            index=models.Index(fields=['featured'], name='services_se_feature_f6d0c3_idx'),
        ),
        migrations.AddIndex(
            model_name='service',
            index=models.Index(fields=['professional', 'is_active'], name='services_se_profess_45f9cd_idx'),
        ),
        migrations.AddConstraint(
            model_name='service',
            constraint=models.UniqueConstraint(fields=('professional', 'slug'), name='unique_professional_service_slug'),
        ),
    ]
