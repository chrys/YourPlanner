# Generated by Django 5.2.1 on 2025-06-01 14:25

import django.db.models.deletion
from django.db import migrations, models
from django.utils.text import slugify

def populate_item_slugs(apps, schema_editor):
    """
    Populate the slug field for existing items.
    For items with duplicate slugs within the same service, append a number.
    """
    Item = apps.get_model('services', 'Item')
    
    # Group items by service
    services = {}
    for item in Item.objects.all():
        if item.service_id not in services:
            services[item.service_id] = []
        services[item.service_id].append(item)
    
    # Process each service's items
    for service_id, items in services.items():
        # Track used slugs for this service
        used_slugs = set()
        
        for item in items:
            # Generate base slug
            base_slug = slugify(item.title)
            slug = base_slug
            
            # If slug already used in this service, append a number
            counter = 1
            while slug in used_slugs:
                slug = f"{base_slug}-{counter}"
                counter += 1
            
            # Update the item
            item.slug = slug
            used_slugs.add(slug)
            item.save()


class Migration(migrations.Migration):

    dependencies = [
        ('services', '0004_alter_price_currency'),
    ]

    operations = [
        migrations.CreateModel(
            name='ServiceCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Service Category',
                'verbose_name_plural': 'Service Categories',
                'ordering': ['name'],
            },
        ),
        migrations.AlterModelOptions(
            name='item',
            options={'ordering': ['service', 'position', 'title'], 'verbose_name': 'Item', 'verbose_name_plural': 'Items'},
        ),
        migrations.AddField(
            model_name='item',
            name='position',
            field=models.PositiveIntegerField(default=0, help_text='Order position in the service'),
        ),
        migrations.AddField(
            model_name='item',
            name='slug',
            field=models.SlugField(blank=True, max_length=255),
        ),
        # Run the data migration to populate slugs before adding the unique constraint
        migrations.RunPython(populate_item_slugs, migrations.RunPython.noop),
        # Now add the unique constraint after slugs are populated
        migrations.AlterUniqueTogether(
            name='item',
            unique_together={('service', 'slug')},
        ),
        migrations.AddField(
            model_name='service',
            name='category',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='services', to='services.servicecategory'),
        ),
    ]

