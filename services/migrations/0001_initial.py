# Generated by Django 5.2.1 on 2025-06-14 06:09

import django.db.models.deletion
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('labels', '0001_initial'),
        ('users', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='ServiceCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, help_text='Optional description of this category', null=True)),
                ('slug', models.SlugField(max_length=100, unique=True)),
            ],
            options={
                'verbose_name': 'Service Category',
                'verbose_name_plural': 'Service Categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is this service currently offered?')),
                ('featured', models.BooleanField(default=False, help_text='Feature this service in listings?')),
                ('slug', models.SlugField(blank=True, max_length=255)),
                ('labels', models.ManyToManyField(blank=True, help_text='Optional labels to categorize this service', related_name='services', to='labels.label')),
                ('professional', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='services', to='users.professional')),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='services', to='services.servicecategory')),
            ],
            options={
                'verbose_name': 'Service',
                'verbose_name_plural': 'Services',
                'ordering': ['professional', 'title'],
            },
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='item_images/')),
                ('is_active', models.BooleanField(default=True, help_text='Is this item currently available?')),
                ('sku', models.CharField(blank=True, help_text='Stock Keeping Unit - unique identifier for this item', max_length=50, null=True)),
                ('stock', models.PositiveIntegerField(default=0, help_text='Number of items in stock (0 for unlimited or not applicable)')),
                ('position', models.PositiveIntegerField(default=0, help_text='Position of this item in the service display')),
                ('slug', models.SlugField(blank=True, max_length=255)),
                ('labels', models.ManyToManyField(blank=True, help_text='Optional labels to categorize this item', related_name='items', to='labels.label')),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='services.service')),
            ],
            options={
                'verbose_name': 'Item',
                'verbose_name_plural': 'Items',
                'ordering': ['service', 'position', 'title'],
            },
        ),
        migrations.CreateModel(
            name='Price',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('currency', models.CharField(blank=True, choices=[('EUR', 'Euro'), ('USD', 'US Dollar'), ('GBP', 'British Pound')], default='EUR', max_length=3)),
                ('frequency', models.CharField(choices=[('ONCE', 'One-Time'), ('HOURLY', 'Hourly'), ('DAILY', 'Daily'), ('WEEKLY', 'Weekly'), ('MONTHLY', 'Monthly'), ('ANNUALLY', 'Annually')], default='ONCE', max_length=10)),
                ('description', models.CharField(blank=True, help_text="Optional description (e.g., 'Standard Tier', 'Discounted')", max_length=255)),
                ('is_active', models.BooleanField(default=True, help_text='Is this price option currently available?')),
                ('valid_from', models.DateTimeField(blank=True, help_text='When this price becomes valid', null=True)),
                ('valid_until', models.DateTimeField(blank=True, help_text='When this price expires', null=True)),
                ('min_quantity', models.PositiveIntegerField(default=1, help_text='Minimum quantity for this price')),
                ('max_quantity', models.PositiveIntegerField(blank=True, help_text='Maximum quantity for this price (blank for unlimited)', null=True)),
                ('discount_percentage', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Discount percentage applied to this price', max_digits=5)),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prices', to='services.item')),
                ('labels', models.ManyToManyField(blank=True, help_text='Optional labels to categorize this price', related_name='prices', to='labels.label')),
            ],
            options={
                'verbose_name': 'Price',
                'verbose_name_plural': 'Prices',
                'ordering': ['item', 'amount'],
                'indexes': [models.Index(fields=['is_active'], name='services_pr_is_acti_e94766_idx'), models.Index(fields=['valid_from', 'valid_until'], name='services_pr_valid_f_9048ad_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='item',
            index=models.Index(fields=['service', 'position'], name='services_it_service_ae23f5_idx'),
        ),
        migrations.AddIndex(
            model_name='item',
            index=models.Index(fields=['sku'], name='services_it_sku_ef9261_idx'),
        ),
        migrations.AddConstraint(
            model_name='item',
            constraint=models.UniqueConstraint(fields=('service', 'slug'), name='unique_service_item_slug'),
        ),
        migrations.AddIndex(
            model_name='service',
            index=models.Index(fields=['is_active'], name='services_se_is_acti_91b7ea_idx'),
        ),
        migrations.AddIndex(
            model_name='service',
            index=models.Index(fields=['featured'], name='services_se_feature_f6d0c3_idx'),
        ),
        migrations.AddIndex(
            model_name='service',
            index=models.Index(fields=['professional', 'is_active'], name='services_se_profess_45f9cd_idx'),
        ),
        migrations.AddConstraint(
            model_name='service',
            constraint=models.UniqueConstraint(fields=('professional', 'slug'), name='unique_professional_service_slug'),
        ),
    ]
